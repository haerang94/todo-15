!function(e){var g={};function I(n){if(g[n])return g[n].exports;var t=g[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,I),t.l=!0,t.exports}I.m=e,I.c=g,I.d=function(n,t,e){I.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:e})},I.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},I.t=function(t,n){if(1&n&&(t=I(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(I.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var g in t)I.d(e,g,function(n){return t[n]}.bind(null,g));return e},I.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return I.d(t,"a",t),t},I.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},I.p="",I(I.s=3)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], " {").concat(content, "}");\n      }\n\n      return content;\n    }).join(\'\');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \'string\') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \'\']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || \'\'; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === \'function\') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot || \'\').concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n  }\n\n  return [content].join(\'\\n\');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n  return "/*# ".concat(data, " */");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanM/MjRmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: "normal", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: "throw", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = "GeneratorFunction";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === "GeneratorFunction"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = "GeneratorFunction";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === "object" &&\n            hasOwn.call(value, "__await")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke("next", value, resolve, reject);\n          }, function(err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        // Note: ["return"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator["return"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError(\n          "The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = "Generator";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return "[object Generator]";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: "root" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = "next";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, "finallyLoc") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === "break" ||\n           type === "continue") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" ||\n          record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    "catch": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : undefined\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you\'ve misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you\'re not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function("r", "regeneratorRuntime = r")(runtime);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},function(n,t,e){n.exports=e(10)},function(module,exports,__webpack_require__){eval("var api = __webpack_require__(0);\n            var content = __webpack_require__(5);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL21haW4uc2Nzcz83ZDc1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTUtMiEuL21haW4uc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(1);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, "@font-face{font-family:\'BMHANNAAir\';src:url(\\"https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_four@1.0/BMHANNAAir.woff\\") format(\\"woff\\");font-weight:normal;font-style:normal}.todo-container{width:360px;height:700px;background:#eee;border-radius:15px;margin:30px;box-shadow:5px 5px 5px darkgray;flex-shrink:0;border:1px solid black}.todo-container-header{display:flex;align-items:center;justify-content:space-between;margin:10px auto 20px;padding:0 15px}.todo-container-part1{display:flex;align-items:center}.todo-container-part1 div{width:20px;height:20px;border-radius:50%;border:1px solid #87dfd6;text-align:center;background:#87dfd6}.todo-container .num-of-todos,.todo-container-header-title{margin:0 5px}.todo-container textarea{width:95%;height:70px;resize:vertical}.todo-item{background:#fff;list-style:none;border-radius:10px;padding:10px;box-shadow:2px 2px 2px darkgray;margin:15px;width:300px;min-height:60px;margin-top:0;margin-bottom:0;transition:none}.todo-item:hover{cursor:grab}.todo-item:active{cursor:grabbing;border:3px solid #87dfd6;opacity:0.6;transition:none;min-height:50px}.todo-item-header{display:flex;align-items:center;justify-content:space-between;width:100%}.todo-item-part1{display:flex;align-items:center}.todo-item-logo,.todo-item-title{margin:0 5px}.todo-item-content{display:flex;flex-wrap:wrap}.todo-item-content p{word-break:break-all}.author{display:flex}.author p{color:darkgray;margin:0 5px}.toggle{overflow:hidden;transition:0.5s}.toggle.hidden{transform:scaleY(0);height:0}.toggle:not(.hidden){transform:scaleY(1);transition:transform 0.2s ease-in-out}.over{background-color:rgba(15,15,15,0.2);border:2px solid #F44336;border-radius:5px}#add-column{display:flex;align-items:center;justify-content:center;width:360px;height:200px;border:2px dashed darkgray;border-radius:15px;margin:30px;flex-shrink:0;color:#3f3f44}#add-column:hover{cursor:pointer;border:5px solid #ff847c;font-size:1.5em}article{overflow-y:scroll;height:630px}#end-of-article{width:100%;height:30px;text-align:center;font-size:30px;color:black;margin-bottom:20px}.add-item-btn:nth-child(2):hover{color:#87dfd6;font-size:20px}.menu{width:100vw;height:70px;background:black;color:white;display:flex;justify-content:space-between;align-items:center;font-size:32px;border-bottom:8px solid #87dfd6}.menu p{margin-right:0.5em}.menu-item{margin:0 50px}.menu-logo{flex-shrink:0;cursor:default;width:200px}.menu-btn{color:#fff;background:none;border:none;margin:10px;justify-self:flex-end}.menu-btn:hover{cursor:pointer;color:#87dfd6}main{display:flex;width:100vw;height:100vh;overflow-x:scroll}.add-item{background:#fff;list-style:none;border-radius:10px;padding:10px;box-shadow:2px 2px 2px darkgray;margin:15px;display:flex;flex-direction:column;align-items:center}.add-item textarea{padding:5px;border-radius:5px}.add-item-btns{width:100%;display:flex;justify-content:space-between}.add-item-btn{width:48%;height:40px;border:1px solid black;background:black;border-radius:10px;margin:10px 0 0 0;color:white}.add-item-btn:first-child{background:#87dfd6;color:black}.add-item-btn:first-child:disabled{color:darkgray;background:#eee;border:none;cursor:default}.modal-container{position:fixed;top:0;left:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center}.modal-overlay{background:rgba(0,0,0,0.4);width:100%;height:100%;position:absolute}.modal-content{position:relative;background:#fff;border:1px solid black;border-radius:10px;text-align:center;width:510px;height:400px;display:flex;flex-direction:column;justify-content:flex-start;align-items:flex-start}.modal-content-header{display:flex;width:100%;height:50px;align-items:center;background:black;color:#fff;justify-content:space-between;border-radius:10px 10px 0 0;border-bottom:5px solid #87dfd6}.modal-content-header p,.modal-content-header i{margin:0 15px}.modal-content section{display:flex;flex-direction:column;align-items:flex-start;padding:0 20px;width:95%}.modal-contentsection textarea{width:100%}.modal-content section h3,.modal-content section textarea,.modal-content section input{margin:5px 0}.close-modal-btn{background:#87dfd6;border:none;width:100px;height:40px;color:black;cursor:pointer;text-align:center;transition:0.2s}.close-modal-btn:hover{width:105px;height:41px;font-size:16px;font-weight:600;background:#fff;border:2px solid #87dfd6;cursor:pointer}.hidden{display:none}.sidebar{position:absolute !important;width:400px !important;height:100vh !important;top:0;right:0;bottom:0;z-index:1000;list-style:none;border-radius:15px 0 0 0;animation:showpane 0.5s cubic-bezier(0, 0, 0, 1)}.sidebar-container{display:flex;flex-direction:column;align-items:flex-start;width:100%;height:100%;background:#fff;border-radius:15px 0 0 0}.sidebar-header{display:flex;width:100%;height:50px;justify-content:space-between;align-items:center;background:#f08a5d;color:#ffeadb;border-bottom:1px solid #ffcbcb;border-radius:15px 0 0 0}.sidebar-header-row{display:flex;align-items:center;padding:10px 0;width:100%}.sidebar-header i{margin:0 10px}.sidebar-activity{background:#f08a5d;color:#ffeadb;width:100%;height:50px;display:flex;align-items:center;padding:0 10px}.sidebar-activity div{width:100%;margin-left:10px}.sidebar-content{width:100%;height:90%}.sidebar-content ul{display:flex;flex-direction:column;width:100%;height:100%;padding:0;box-shadow:-5px 0 10px 0 darkgray;overflow-y:scroll}.sidebar-content ul li{width:95%;height:60px;display:flex;flex-direction:column;justify-content:center;align-items:center;border:1px solid #ffcbcb;border-top:none;border-left:none;padding:10px}.row{width:100%;display:flex;justify-content:flex-start;align-items:center}.col{display:flex;flex-direction:column;align-items:flex-start;width:100%;margin:0 10px;color:#323232}.col div:nth-child(2){color:#116979}.log{display:flex;align-items:center;padding:0}.log p{margin:0 10px 0 0;color:blue}@keyframes showpane{0%{transform:translateX(390px)}100%{transform:translateX(0)}}.droppable{background:#fff;list-style:none;border-radius:10px;padding:10px;box-shadow:2px 2px 2px darkgray;margin:15px;width:300px;height:18px;background:none;opacity:0;margin:0;padding:0;transition:0.5s}.show{opacity:0.8;width:300px;height:40px;background:#87dfd6;margin:20px;padding:10px;z-index:1000;width:300px;min-height:60px}.clone{background:#fff;list-style:none;border-radius:10px;padding:10px;box-shadow:2px 2px 2px darkgray;margin:15px}#login-form{display:flex;align-items:center}#login-form p{color:#fff;width:500px}#login-form input{margin:0 10px}#login-form label{width:240px}#login-form input[type=checkbox]+label{display:block;cursor:pointer}#login-form input[type=checkbox]{display:none}#login-form input[type=checkbox]+label:before{content:\\"\\\\2714\\";border:0.1em solid mediumseagreen;border-radius:0.2em;display:inline-block;width:1em;height:1em;margin-right:0.2em;vertical-align:bottom;color:transparent;transition:.2s;font-size:0.8em;padding:0.1em}#login-form input[type=checkbox]+label:active:before{transform:scale(0);border:1px solid mediumseagreen}#login-form input[type=checkbox]:checked+label:before{background-color:MediumSeaGreen;color:#fff}#login-form input[type=text]{border-radius:5px;padding:0 5px}#login-form input[type=button]{width:110px;height:40px;font-size:1em;color:#fff;background:none;border:1px solid #fff;font-size:0.9em}#login-form input[type=button]:hover{background:mediumseagreen;border:none;cursor:pointer;font-size:1em;width:115px}#beforelogin{display:flex;flex-direction:column;flex-direction:center;align-items:center;position:relative;background:#fff}#beforelogin h2{font-size:52px}#beforelogin div{min-width:600px;height:65%;width:50%;box-shadow:5px 5px 5px darkgray;border:2px solid black}#beforelogin div img{min-width:600px;width:100%;height:100%}#logout-btn{width:110px;height:40px;font-size:1em;color:#fff;background:none;border:1px solid #fff;font-size:0.9em}#logout-btn:hover{background:mediumseagreen;border:none;cursor:pointer;font-size:1em;width:115px}#logout{margin:0 10px}.log-message{display:flex;align-items:center}footer{display:flex;align-items:center;justify-content:center;margin-bottom:20px;height:100px}.beating-icon div{height:100%;width:100%;animation:beat 0.35s infinite}.beating-icon div i{color:salmon;animation:beat 0.7s infinite}@keyframes beat{50%{transform:scale(1.3)}}*{outline:none;font-family:\\"BMHANNAAir\\";scroll-behavior:smooth;transition:0.3s}ul{padding:5px;margin:0}input[type=\'button\']{cursor:pointer;caret-color:transparent}i{font-size:32px}i:hover{cursor:pointer;color:#87dfd6;transition:0.5s;transform:scale(1.3)}.flex-container{display:flex;align-items:center;justify-content:flex-start;flex-direction:column;height:100vh;width:100vw}footer{position:fixed;bottom:0;left:0;font-size:28px;height:5%;width:100vw}.hidden{display:none}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){eval("var api = __webpack_require__(0);\n            var content = __webpack_require__(7);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL192YXJpYWJsZXMuc2Nzcz9hYzI3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTUtMiEuL192YXJpYWJsZXMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(1);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, "", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL192YXJpYWJsZXMuc2Nzcz82ZjIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){eval("var api = __webpack_require__(0);\n            var content = __webpack_require__(9);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9ub3JtYWxpemUuY3NzPzliMjUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNS0yIS4vbm9ybWFsaXplLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(1);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, "/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:0.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type=\\"button\\"],[type=\\"reset\\"],[type=\\"submit\\"]{-webkit-appearance:button}button::-moz-focus-inner,[type=\\"button\\"]::-moz-focus-inner,[type=\\"reset\\"]::-moz-focus-inner,[type=\\"submit\\"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=\\"button\\"]:-moz-focusring,[type=\\"reset\\"]:-moz-focusring,[type=\\"submit\\"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=\\"checkbox\\"],[type=\\"radio\\"]{box-sizing:border-box;padding:0}[type=\\"number\\"]::-webkit-inner-spin-button,[type=\\"number\\"]::-webkit-outer-spin-button{height:auto}[type=\\"search\\"]{-webkit-appearance:textfield;outline-offset:-2px}[type=\\"search\\"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9ub3JtYWxpemUuY3NzP2IyYjEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qISBub3JtYWxpemUuY3NzIHY4LjAuMSB8IE1JVCBMaWNlbnNlIHwgZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MgKi9odG1se2xpbmUtaGVpZ2h0OjEuMTU7LXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OjEwMCV9Ym9keXttYXJnaW46MH1tYWlue2Rpc3BsYXk6YmxvY2t9aDF7Zm9udC1zaXplOjJlbTttYXJnaW46MC42N2VtIDB9aHJ7Ym94LXNpemluZzpjb250ZW50LWJveDtoZWlnaHQ6MDtvdmVyZmxvdzp2aXNpYmxlfXByZXtmb250LWZhbWlseTptb25vc3BhY2UsIG1vbm9zcGFjZTtmb250LXNpemU6MWVtfWF7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH1hYmJyW3RpdGxlXXtib3JkZXItYm90dG9tOm5vbmU7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lIGRvdHRlZH1iLHN0cm9uZ3tmb250LXdlaWdodDpib2xkZXJ9Y29kZSxrYmQsc2FtcHtmb250LWZhbWlseTptb25vc3BhY2UsIG1vbm9zcGFjZTtmb250LXNpemU6MWVtfXNtYWxse2ZvbnQtc2l6ZTo4MCV9c3ViLHN1cHtmb250LXNpemU6NzUlO2xpbmUtaGVpZ2h0OjA7cG9zaXRpb246cmVsYXRpdmU7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9c3Vie2JvdHRvbTotMC4yNWVtfXN1cHt0b3A6LTAuNWVtfWltZ3tib3JkZXItc3R5bGU6bm9uZX1idXR0b24saW5wdXQsb3B0Z3JvdXAsc2VsZWN0LHRleHRhcmVhe2ZvbnQtZmFtaWx5OmluaGVyaXQ7Zm9udC1zaXplOjEwMCU7bGluZS1oZWlnaHQ6MS4xNTttYXJnaW46MH1idXR0b24saW5wdXR7b3ZlcmZsb3c6dmlzaWJsZX1idXR0b24sc2VsZWN0e3RleHQtdHJhbnNmb3JtOm5vbmV9YnV0dG9uLFt0eXBlPVxcXCJidXR0b25cXFwiXSxbdHlwZT1cXFwicmVzZXRcXFwiXSxbdHlwZT1cXFwic3VibWl0XFxcIl17LXdlYmtpdC1hcHBlYXJhbmNlOmJ1dHRvbn1idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsW3R5cGU9XFxcImJ1dHRvblxcXCJdOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPVxcXCJyZXNldFxcXCJdOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPVxcXCJzdWJtaXRcXFwiXTo6LW1vei1mb2N1cy1pbm5lcntib3JkZXItc3R5bGU6bm9uZTtwYWRkaW5nOjB9YnV0dG9uOi1tb3otZm9jdXNyaW5nLFt0eXBlPVxcXCJidXR0b25cXFwiXTotbW96LWZvY3VzcmluZyxbdHlwZT1cXFwicmVzZXRcXFwiXTotbW96LWZvY3VzcmluZyxbdHlwZT1cXFwic3VibWl0XFxcIl06LW1vei1mb2N1c3Jpbmd7b3V0bGluZToxcHggZG90dGVkIEJ1dHRvblRleHR9ZmllbGRzZXR7cGFkZGluZzowLjM1ZW0gMC43NWVtIDAuNjI1ZW19bGVnZW5ke2JveC1zaXppbmc6Ym9yZGVyLWJveDtjb2xvcjppbmhlcml0O2Rpc3BsYXk6dGFibGU7bWF4LXdpZHRoOjEwMCU7cGFkZGluZzowO3doaXRlLXNwYWNlOm5vcm1hbH1wcm9ncmVzc3t2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZX10ZXh0YXJlYXtvdmVyZmxvdzphdXRvfVt0eXBlPVxcXCJjaGVja2JveFxcXCJdLFt0eXBlPVxcXCJyYWRpb1xcXCJde2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjB9W3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFt0eXBlPVxcXCJudW1iZXJcXFwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbntoZWlnaHQ6YXV0b31bdHlwZT1cXFwic2VhcmNoXFxcIl17LXdlYmtpdC1hcHBlYXJhbmNlOnRleHRmaWVsZDtvdXRsaW5lLW9mZnNldDotMnB4fVt0eXBlPVxcXCJzZWFyY2hcXFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbnstd2Via2l0LWFwcGVhcmFuY2U6bm9uZX06Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uey13ZWJraXQtYXBwZWFyYW5jZTpidXR0b247Zm9udDppbmhlcml0fWRldGFpbHN7ZGlzcGxheTpibG9ja31zdW1tYXJ5e2Rpc3BsYXk6bGlzdC1pdGVtfXRlbXBsYXRle2Rpc3BsYXk6bm9uZX1baGlkZGVuXXtkaXNwbGF5Om5vbmV9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/normalize.css\nvar normalize = __webpack_require__(8);\n\n// CONCATENATED MODULE: ./src/modules/utils/fetchManger.js\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar baseUrl = 'http://localhost:3000';\nvar origin = 'http://localhost:9000';\nvar options = {\n  headers: {\n    Origin: origin,\n    'Content-Type': 'application/json'\n  }\n};\n\nvar getOptions = _objectSpread(_objectSpread({}, options), {}, {\n  method: 'GET'\n});\n\nvar postOptions = _objectSpread(_objectSpread({}, options), {}, {\n  method: 'POST'\n});\n\nvar deleteOptions = _objectSpread(_objectSpread({}, options), {}, {\n  method: 'DELETE',\n  'Access-Control-Allow-Origin': '*'\n});\n\nvar patchOptions = _objectSpread(_objectSpread({}, options), {}, {\n  method: 'PATCH'\n});\n\nfunction getFetchManger(url) {\n  return fetch(baseUrl + url, getOptions).then(function (res) {\n    return res.json();\n  });\n}\n\nfunction postFetchManger(url, body) {\n  postOptions['body'] = JSON.stringify(body);\n  return fetch(baseUrl + url, postOptions);\n}\n\nfunction deleteFetchManager(url, body) {\n  if (body) deleteOptions['body'] = JSON.stringify(body);\n  return fetch(baseUrl + url, deleteOptions).then(function (res) {\n    return res;\n  })[\"catch\"](function (e) {\n    return console.log(e);\n  });\n}\n\nfunction patchFetchManger(url, body) {\n  patchOptions['body'] = JSON.stringify(body);\n  return fetch(baseUrl + url, patchOptions);\n} // test\n\n\n\n// CONCATENATED MODULE: ./src/components/container.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Container = /*#__PURE__*/function () {\n  function Container() {\n    _classCallCheck(this, Container);\n  }\n\n  _createClass(Container, [{\n    key: \"makeContainer\",\n    value: function makeContainer(id, groupTitle, groupId) {\n      return \"\\n     <section id=\\\"section-\".concat(id, \"\\\" class=\\\"todo-container\\\">\\n     <header>\\n         <div class=\\\"todo-container-header\\\">\\n             <div class=\\\"todo-container-part1\\\">\\n                 <div class=\\\"num-of-todos-\").concat(id, \"\\\">0</div>\\n                 <p id=\\\"column-title-\").concat(id, \"\\\" class=\\\"todo-container-header-title\\\">\").concat(groupTitle, \"</p>\\n             </div>\\n             <div class=\\\"todo-container-part2\\\">\\n                <i id=\\\"input-btn-\").concat(id, \"\\\" class=\\\"fa fa-plus\\\" aria-hidden=\\\"true\\\"></i>\\n                <i class=\\\"fa fa-times\\\" aria-hidden=\\\"true\\\"></i>\\n             </div>\\n         </div>\\n     </header>\\n     \\n     <article>\\n         <div class=\\\"scroll-\").concat(id, \"\\\"></div>\\n         <ul id=\\\"input-todo-\").concat(id, \"\\\" class=\\\"hidden toggle\\\">\\n             <li class=\\\"add-item\\\">\\n                 <textarea id=\\\"textarea-\").concat(id, \"\\\" maxlength=\\\"500\\\" placeholder=\\\"Enter a note\\\"></textarea>\\n                 <div class=\\\"add-item-btns\\\">\\n                     <input id=\\\"add-btn-\").concat(id, \"\\\" class=\\\"add-item-btn\\\" type=\\\"button\\\" value=\\\"Add\\\" disabled>\\n                     <input id=\\\"cancel-btn-\").concat(id, \"\\\" class=\\\"add-item-btn\\\" type=\\\"button\\\" value=\\\"Cancel\\\">\\n                 </div>\\n             </li>\\n         </ul>\\n        <ul id=\\\"\").concat(groupId, \"\\\" class=\\\"todoitem-ul\\\">\\n        <li class=\\\"droppable\\\"></li>\\n        <li class=\\\"todo-item\\\" style=\\\"visibility:hidden\\\" idx=\\\"-1\\\"></li>\\n        </ul>\\n        <div id=\\\"end-of-article\\\">\\uB05D \\uC774\\uB77C\\uC624</div>\\n     </article>  \\n     </section>\");\n    }\n  }, {\n    key: \"addContainer\",\n    value: function addContainer(data) {\n      var groupId = data.groupId;\n      var id = data.groupId.substr(9);\n      var groupTitle = data.groupTitle;\n      var aside = document.querySelector('aside');\n      var newContainer = this.makeContainer(id, groupTitle, groupId);\n      aside.insertAdjacentHTML('beforebegin', newContainer);\n    }\n  }]);\n\n  return Container;\n}();\n\n\n// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js\nvar runtime = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/modules/utils/updateCount.js\nfunction updateCount(listUl) {\n  var section = listUl.closest('section');\n  var count = listUl.querySelectorAll('.todo-item').length - 1;\n  var countElement = section.querySelector('div > div > div');\n  countElement.textContent = count;\n}\n\n\n// CONCATENATED MODULE: ./src/modules/dragAndDrop.js\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction dragAndDrop_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction dragAndDrop_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction dragAndDrop_createClass(Constructor, protoProps, staticProps) { if (protoProps) dragAndDrop_defineProperties(Constructor.prototype, protoProps); if (staticProps) dragAndDrop_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\nvar dragAndDrop_Draggable = /*#__PURE__*/function () {\n  function Draggable(el) {\n    dragAndDrop_classCallCheck(this, Draggable);\n\n    this.el = el;\n    this.cloneEl = null;\n    this.shiftX = null;\n    this.shiftY = null;\n    this.droppable = null;\n    this.droppableLists = null;\n    this.todoLists = null;\n    this.closestLinkIndex = null;\n    this.ul = null;\n    this.time = 0;\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onMouseUp = this.onMouseUp.bind(this);\n    this.addEventHandlers();\n  }\n\n  dragAndDrop_createClass(Draggable, [{\n    key: \"init\",\n    value: function init() {\n      //필수\n      this.cloneEl = this.el.cloneNode(true);\n      this.cloneEl.classList.add('clone');\n      this.cloneEl.classList.remove('todo-item');\n      this.ul = this.el.closest('ul');\n    }\n  }, {\n    key: \"addEventHandlers\",\n    value: function addEventHandlers() {\n      this.el.addEventListener('mousedown', this.onMouseDown);\n      this.el.addEventListener('dragstart', function (e) {\n        return e.preventDefault();\n      });\n      this.el.addEventListener('mouseup', this.onMouseUp);\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(e) {\n      e.preventDefault();\n\n      if (localStorage.getItem('authorization') !== 'true') {\n        alert('쓰기모드가 아닙니다');\n        return;\n      }\n\n      if (e.target.dataset.method === 'delete') return;\n\n      if (new Date().getTime() < this.time + 400) {\n        //버그 해결\n        document.removeEventListener('mousemove', this.onMouseMove);\n        this.cloneEl.remove();\n        return;\n      }\n\n      this.time = new Date().getTime();\n      this.init();\n      this.getDragPointer(e.clientX, e.clientY);\n      this.prepareElement();\n      this.moveElementTo(e.pageX, e.pageY);\n      document.addEventListener('mousemove', this.onMouseMove);\n      this.ul.insertBefore(this.cloneEl, this.el.nextSibling);\n    }\n  }, {\n    key: \"getDragPointer\",\n    value: function getDragPointer(x, y) {\n      var elRect = this.el.getBoundingClientRect();\n      this.shiftX = x - elRect.left;\n      this.shiftY = y - elRect.top;\n      this.el.style.left = this.shiftX + 'px';\n      this.el.style.right = this.shiftY + 'px';\n    }\n  }, {\n    key: \"prepareElement\",\n    value: function prepareElement() {\n      this.el.style.position = 'absolute';\n      this.el.style.zIndex = 999;\n    }\n  }, {\n    key: \"closestTodoList\",\n    value: function closestTodoList(e) {\n      this.todoLists = document.querySelectorAll('.todo-item');\n      this.droppableLists = document.querySelectorAll('.droppable');\n      var elements = Array.from(this.todoLists);\n      var linkCoords = elements.map(function (link) {\n        var rect = link.getBoundingClientRect();\n        return [rect.x, rect.y];\n      });\n      var distances = [];\n      linkCoords.forEach(function (linkCoord) {\n        var distance = Math.hypot(linkCoord[0] - parseInt(e.clientX), linkCoord[1] - parseInt(e.clientY));\n        distances.push(parseInt(distance));\n      });\n      this.closestLinkIndex = distances.indexOf(Math.min.apply(Math, distances)); // 먼저 show가 있는 것을 검사해 다 지워준다.\n\n      if (this.droppableLists !== null) {\n        Array.from(this.droppableLists).map(function (list) {\n          if (list.classList.contains('show')) list.classList.remove('show');\n        });\n      }\n\n      this.todoLists[this.closestLinkIndex].previousElementSibling.classList.add('show');\n    }\n  }, {\n    key: \"moveElementTo\",\n    value: function moveElementTo(x, y) {\n      var leftPosition = x - this.shiftX < 0 ? 0 : x - this.shiftX;\n      var topPosition = y - this.shiftY < 0 ? 0 : y - this.shiftY;\n      this.el.style.left = \"\".concat(leftPosition, \"px\");\n      this.el.style.top = \"\".concat(topPosition, \"px\");\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(e) {\n      this.moveElementTo(e.pageX, e.pageY);\n      this.closestTodoList(e);\n    }\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(e) {\n      if (e.target.dataset.method === 'delete') return;\n      document.removeEventListener('mousemove', this.onMouseMove);\n      this.el.style.position = 'static';\n\n      if (this.droppableLists !== null && this.todoLists !== null) {\n        var todolist = this.todoLists[this.closestLinkIndex];\n        Array.from(this.droppableLists).map(function (list) {\n          if (list.classList.contains('show')) list.classList.remove('show');\n        }); //다른 곳으로 이동한다면\n\n        if (this.el !== todolist) {\n          this.el.previousElementSibling.remove();\n          var ul = todolist.closest('ul');\n          ul.insertBefore(this.el, todolist); //droppable추가\n\n          var li = document.createElement('li');\n          li.classList.add('droppable');\n          ul.insertBefore(li, todolist);\n          var id = this.ul.id.substr(9);\n          var curIdx;\n\n          if (this.el === ul.children[1]) {\n            curIdx = +this.el.nextSibling.nextSibling.getAttribute('idx') + 1;\n          } else {\n            curIdx = +this.el.previousElementSibling.previousElementSibling.getAttribute('idx');\n          }\n\n          var data = {\n            idx: curIdx,\n            groupId: ul.id,\n            groupTitle: document.getElementById(\"column-title-\".concat(id)).textContent,\n            userId: localStorage.getItem('userId')\n          };\n          patchFetchManger(\"/api/todos/move/\".concat(this.el.id), data).then(function (res) {\n            if (res.status !== 200) {\n              if (res.status === 401) throw new Error('쓰기 모드가 아닙니다');else throw new Error('다시 해주세요');\n            }\n          })[\"catch\"](function (e) {\n            alert(e);\n            return;\n          });\n        }\n\n        this.cloneEl.remove();\n        this.init();\n        var ulList = document.querySelectorAll('.todoitem-ul');\n\n        var _iterator = _createForOfIteratorHelper(ulList),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _ul = _step.value;\n            updateCount(_ul);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }]);\n\n  return Draggable;\n}();\n\n\n// CONCATENATED MODULE: ./src/components/item.js\nfunction item_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction item_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction item_createClass(Constructor, protoProps, staticProps) { if (protoProps) item_defineProperties(Constructor.prototype, protoProps); if (staticProps) item_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Item = /*#__PURE__*/function () {\n  function Item() {\n    item_classCallCheck(this, Item);\n  }\n\n  item_createClass(Item, [{\n    key: \"makeItem\",\n    value: function makeItem(id, idx, title, content, author) {\n      return \"\\n    <li class=\\\"droppable\\\"></li>\\n    <li id=\\\"\".concat(id, \"\\\" idx=\").concat(idx, \" class=\\\"todo-item\\\">\\n        <div class=\\\"todo-item-header\\\">\\n            <div class=\\\"todo-item-part1\\\">\\n                <div class=\\\"todo-item-logo\\\">\\n                <i class=\\\"fa fa-list-alt\\\" aria-hidden=\\\"true\\\" fa-lg></i></div>\\n                <h3 class=\\\"todo-item-title\\\">\").concat(title, \"</h3>\\n            </div>\\n            <i class=\\\"fa fa-times-circle-o todo-item-part2 fa-lg\\\" aria-hidden=\\\"true\\\" data-method=\\\"delete\\\"></i>\\n        </div>\\n        <div class=\\\"todo-item-content\\\">\\n            <p>\").concat(content, \"</p>\\n        </div>\\n        <div class=\\\"author\\\"><p>Added by</p>\").concat(author, \"</div>\\n      </li>\\n  \");\n    }\n  }, {\n    key: \"addItem\",\n    value: function addItem(_ref) {\n      var id = _ref.id,\n          idx = _ref.idx,\n          groupId = _ref.groupId,\n          title = _ref.title,\n          content = _ref.content,\n          author = _ref.author;\n      var ul = document.querySelector(\"#\".concat(groupId));\n      var item = this.makeItem(id, idx, title, content, author);\n      ul.insertAdjacentHTML('afterbegin', item);\n    }\n  }]);\n\n  return Item;\n}();\n\n\n// CONCATENATED MODULE: ./src/modules/utils/routerList.js\nvar todoApi = '/api/todos';\nvar todoListApi = '/api/todolist';\nvar todoLogApi = '/api/todo-logs';\nvar todoMoveApi = '/api/todos/move';\nvar userApi = '/api/users';\n\n// CONCATENATED MODULE: ./src/modules/utils/splitText.js\nfunction splitText(text) {\n  var title = text.substr(0, 20); //20글자까지는 타이틀\n\n  var content = text.substr(20);\n  return {\n    title: title,\n    content: content\n  };\n}\n// CONCATENATED MODULE: ./src/modules/todoLog.js\n\n\nvar logUl = document.querySelector('ul.activity-ul');\nvar logList = [];\n\nfunction addTodoLog(data) {\n  data['userId'] = localStorage.getItem('userId');\n  postFetchManger(todoLogApi, data).then(function (res) {\n    if (res.status !== 200) throw new Error();\n    return res.json();\n  }).then(function (res) {\n    renderTodoLog(data);\n  })[\"catch\"](function (e) {\n    console.log(e);\n  });\n}\n\nfunction getTodoLog() {\n  getFetchManger(todoLogApi).then(function (logs) {\n    logList = logs;\n    logs.forEach(function (log) {\n      renderTodoLog(log);\n    });\n  })[\"catch\"](function (e) {\n    console.log(e);\n  });\n}\n\nfunction updateTodoLog() {\n  var previousLogs = logUl.children;\n  var time;\n  var previousTime;\n\n  for (var i = 0; i < previousLogs.length; i++) {\n    time = calculateTime(logList[i].time);\n    previousTime = previousLogs[i].querySelector('span.time');\n    if (previousTime.textContent !== time) previousLogs[i].querySelector('span.time').textContent = time;\n  }\n}\n\n\n\nfunction renderTodoLog(data) {\n  var todoLog = makeTodoLog(data);\n  logUl.insertAdjacentHTML('afterbegin', todoLog);\n}\n\nfunction makeTodoLog(data) {\n  var actionType = data.actionType,\n      username = data.username,\n      previousContent = data.previousContent,\n      presentContent = data.presentContent,\n      preivousColumn = data.preivousColumn,\n      presentColumn = data.presentColumn;\n  var time = calculateTime(data.time);\n  var content;\n\n  switch (actionType) {\n    case 'add':\n      content = \"added \".concat(presentContent, \" to \").concat(presentColumn);\n      break;\n\n    case 'remove':\n      content = \"removed \".concat(presentContent, \" from \").concat(presentColumn);\n      break;\n\n    case 'update':\n      content = \"updated \".concat(previousContent, \" to \").concat(presentContent);\n      break;\n\n    case 'move':\n      content = \"moved \".concat(presentContent, \" from \").concat(preivousColumn, \" to \").concat(presentColumn);\n      break;\n\n    default:\n  }\n\n  return makeTemplate(username, content, time);\n}\n\nfunction calculateTime(pastTimeString) {\n  var millisecondUnit = 1000;\n  var timeUnit = 60;\n  var dateUnit = 24;\n  var presentTime = new Date();\n  var pastTime = new Date(pastTimeString);\n  var diffSecond = Math.floor((presentTime - pastTime) / millisecondUnit);\n  var diffMinute = Math.floor(diffSecond / timeUnit);\n  var diffHour = Math.floor(diffMinute / timeUnit);\n  var diffDate = Math.floor(diffHour / dateUnit);\n  if (diffDate > 0) return \"\".concat(diffDate, \" days\");\n  if (diffHour > 0) return \"\".concat(diffHour, \" hours\");\n  if (diffMinute > 0) return \"\".concat(diffMinute, \" minutes\");\n  return \"\".concat(diffSecond, \" seconds\");\n}\n\nfunction makeTemplate(username, content, time) {\n  return \"<li>\\n    <div class=\\\"row\\\">\\n    <img src=\\\"https://images.unsplash.com/photo-1537151608828-ea2b11777ee8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1239&q=80\\\" alt=\\\"logo\\\" style=\\\"width:40px;height:40px\\\">\\n    <div class=\\\"col\\\">\\n        <div class=\\\"log\\\"><p>@\".concat(username, \"</p> \").concat(content, \" </div>\\n        <div><span class=\\\"time\\\">\").concat(time, \"</span> ago.</div>\\n    </div>\\n    </div>\\n  </li>\");\n}\n// CONCATENATED MODULE: ./src/modules/utils/actionTypeList.js\n/* harmony default export */ var actionTypeList = ({\n  ADD: 'add',\n  MOVE: 'move',\n  UPDATE: 'update',\n  REMOVE: 'remove'\n});\n// CONCATENATED MODULE: ./src/modules/todo/addTodo.js\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\n\n\n\n\n\nfunction addTodo(_x) {\n  return _addTodo.apply(this, arguments);\n}\n\nfunction _addTodo() {\n  _addTodo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {\n    var inputUl, listUl, groupId, textarea, data, result, id, item, newItem, log;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(e.target.value !== 'Add')) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            e.target.setAttribute('disabled', 'true');\n            inputUl = e.target.closest('ul');\n            listUl = inputUl.nextElementSibling;\n            groupId = listUl.id;\n            textarea = inputUl.querySelector('textarea');\n            data = makeData({\n              listUl: listUl,\n              inputUl: inputUl,\n              groupId: groupId,\n              textarea: textarea\n            });\n            _context.next = 10;\n            return addItem(data);\n\n          case 10:\n            result = _context.sent;\n\n            if (result) {\n              _context.next = 13;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 13:\n            id = result.id;\n            item = new Item();\n            data.id = id;\n            item.addItem(data);\n            clearTextarea(textarea);\n            fillTitleContent(listUl, data);\n            updateCount(listUl);\n            newItem = listUl.children[1];\n            new dragAndDrop_Draggable(newItem);\n            log = makeLog(data.title, data.groupTitle);\n            addTodoLog(log);\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _addTodo.apply(this, arguments);\n}\n\nfunction makeLog(title, groupTitle) {\n  return {\n    username: localStorage.getItem('username'),\n    actionType: actionTypeList.ADD,\n    time: new Date().toString(),\n    previousContent: null,\n    presentContent: title,\n    previousColumn: null,\n    presentColumn: groupTitle\n  };\n}\n\nfunction clearTextarea(textarea) {\n  textarea.value = '';\n  textarea.focus();\n}\n\nfunction makeData(_ref) {\n  var listUl = _ref.listUl,\n      inputUl = _ref.inputUl,\n      groupId = _ref.groupId,\n      textarea = _ref.textarea;\n  var idx = +listUl.children[1].getAttribute('idx') + 1;\n  var groupTitle = listUl.closest('section').querySelector('.todo-container-header-title').textContent;\n\n  var _splitText = splitText(textarea.value),\n      title = _splitText.title,\n      content = _splitText.content;\n\n  var userId = localStorage.getItem('userId');\n  var data = {\n    idx: idx,\n    title: title,\n    content: content,\n    author: localStorage.getItem('username'),\n    groupId: groupId,\n    groupTitle: groupTitle,\n    userId: userId\n  };\n  return data;\n}\n\nfunction addItem(data) {\n  return postFetchManger(todoApi, data).then(function (res) {\n    if (res.status !== 200) {\n      if (res.status === 401) throw new Error('쓰기 모드가 아닙니다');else throw new Error('다시 해주세요');\n    }\n\n    return res.json();\n  }).then(function (result) {\n    return result;\n  })[\"catch\"](function (e) {\n    alert(e);\n  });\n}\n\nfunction fillTitleContent(listUl, _ref2) {\n  var title = _ref2.title,\n      content = _ref2.content;\n  var addedItem = listUl.querySelector('.todo-item'); //title영역\n\n  addedItem.querySelector('.todo-item-title').textContent = title; //content 영역\n\n  addedItem.querySelector('.todo-item-content > p').textContent = content;\n}\n// CONCATENATED MODULE: ./src/modules/todo/deleteTodo.js\nfunction deleteTodo_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction deleteTodo_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { deleteTodo_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { deleteTodo_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\n\n\nvar confirmSentence = '선택하신 카드를 삭제하겠습니까?';\nfunction deleteTodo(_x) {\n  return _deleteTodo.apply(this, arguments);\n}\n\nfunction _deleteTodo() {\n  _deleteTodo = deleteTodo_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {\n    var deleteItem, title, groupTitle, id, ul, userId, result, log;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(e.target.dataset.method !== 'delete')) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            if (!(localStorage.getItem('authorization') !== 'true')) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", alert('쓰기모드가 아닙니다'));\n\n          case 4:\n            if (checkConfirm()) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 6:\n            deleteItem = e.target.closest('li');\n            title = deleteItem.querySelector('.todo-item-title').textContent;\n            groupTitle = deleteItem.closest('section').querySelector('.todo-container-header-title').textContent;\n            id = deleteItem.id;\n            ul = e.target.closest('ul');\n            userId = localStorage.getItem('userId');\n            _context.prev = 12;\n            _context.next = 15;\n            return deleteFetchManager(\"\".concat(todoApi, \"/\").concat(id), {\n              userId: userId\n            });\n\n          case 15:\n            result = _context.sent;\n\n            if (!(result.status !== 200)) {\n              _context.next = 22;\n              break;\n            }\n\n            if (!(result.status === 401)) {\n              _context.next = 21;\n              break;\n            }\n\n            throw new Error('쓰기 모드가 아닙니다');\n\n          case 21:\n            throw new Error('다시 해주세요');\n\n          case 22:\n            deleteItem.previousElementSibling.remove();\n            deleteItem.remove();\n            updateCount(ul);\n            log = makeRemoveLog(title, groupTitle);\n            addTodoLog(log);\n            _context.next = 32;\n            break;\n\n          case 29:\n            _context.prev = 29;\n            _context.t0 = _context[\"catch\"](12);\n            return _context.abrupt(\"return\", alert(_context.t0));\n\n          case 32:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[12, 29]]);\n  }));\n  return _deleteTodo.apply(this, arguments);\n}\n\nfunction makeRemoveLog(title, groupTitle) {\n  return {\n    username: localStorage.getItem('username'),\n    actionType: actionTypeList.REMOVE,\n    time: new Date().toString(),\n    previousContent: null,\n    presentContent: title,\n    previousColumn: null,\n    presentColumn: groupTitle\n  };\n}\n\nfunction checkConfirm() {\n  return confirm(confirmSentence);\n}\n// CONCATENATED MODULE: ./src/components/main.js\nfunction main_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction main_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { main_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { main_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction main_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction main_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction main_createClass(Constructor, protoProps, staticProps) { if (protoProps) main_defineProperties(Constructor.prototype, protoProps); if (staticProps) main_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n\n\n\nvar main_Main = /*#__PURE__*/function () {\n  function Main(main) {\n    main_classCallCheck(this, Main);\n\n    this.main = main;\n  }\n\n  main_createClass(Main, [{\n    key: \"init\",\n    value: function () {\n      var _init = main_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var columns, results, i;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return getFetchManger(todoListApi);\n\n              case 2:\n                columns = _context2.sent;\n                this.renderConatiners(columns.data); //아이템 생성\n\n                _context2.next = 6;\n                return getFetchManger(todoApi);\n\n              case 6:\n                results = _context2.sent;\n                this.renderItems(results); //\n\n                getTodoLog();\n                setInterval( /*#__PURE__*/main_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          updateTodoLog();\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), 60000);\n                this.main.addEventListener('click', addTodo);\n                this.main.addEventListener('click', deleteTodo);\n\n                for (i = 0; i < columns.data.length; i++) {\n                  this.countTodo(columns.data[i].groupId);\n                }\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"countTodo\",\n    value: function countTodo(groupId) {\n      var ul = this.main.querySelector(\"#\".concat(groupId));\n      var section = ul.closest('section');\n      var result = section.querySelector('header > div> div > div'); //text 제외한 자식 li태그 개수\n\n      result.textContent = ul.querySelectorAll('.todo-item').length - 1;\n    }\n  }, {\n    key: \"renderConatiners\",\n    value: function renderConatiners(dataList) {\n      var col = new Container();\n      dataList.forEach(function (data) {\n        col.addContainer(data);\n      });\n    }\n  }, {\n    key: \"renderItems\",\n    value: function renderItems(results) {\n      var item = new Item();\n      results.forEach(function (_ref2) {\n        var id = _ref2.id,\n            idx = _ref2.idx,\n            groupId = _ref2.groupId,\n            title = _ref2.title,\n            content = _ref2.content,\n            author = _ref2.author;\n        item.addItem({\n          id: id,\n          idx: idx,\n          groupId: groupId,\n          title: title,\n          content: content,\n          author: author\n        });\n      });\n    }\n  }]);\n\n  return Main;\n}();\n\n\n// CONCATENATED MODULE: ./src/modules/toggleInput.js\nfunction toggleInput() {\n  var main = document.querySelector('main');\n  main.addEventListener('click', function (e) {\n    //+ 버튼을 눌렀을 때 토글시키기\n    if (!e.target.classList.contains('fa-plus')) return;\n    if (localStorage.getItem('authorization') !== 'true') return alert('쓰기모드가 아닙니다');\n    var id = e.target.id.split('-')[2];\n    toggleHidden(id);\n    var scrollPoint = document.querySelector(\".scroll-\".concat(id));\n    scrollPoint.scrollIntoView();\n  }); // 취소 버튼을 눌렀을 때\n\n  document.addEventListener('click', function (e) {\n    if (e.target.id.substr(0, 10) !== 'cancel-btn') return;\n    var id = e.target.id.substr(11);\n    toggleHidden(id);\n  });\n}\n\nfunction toggleHidden(id) {\n  var inputContainer = document.getElementById(\"input-todo-\".concat(id));\n  var textarea = document.querySelector(\"#textarea-\".concat(id));\n\n  if (inputContainer.classList.contains('hidden')) {\n    textarea.value = '';\n    inputContainer.classList.remove('hidden');\n  } else {\n    inputContainer.classList.add('hidden');\n  }\n}\n// CONCATENATED MODULE: ./src/modules/toggleBtn.js\nfunction toggleBtn() {\n  document.addEventListener('input', function (e) {\n    if (e.target.type === 'textarea' && e.target.dataset.textarea !== 'modal') {\n      var textarea = e.target;\n      var addBtn = textarea.nextElementSibling.firstElementChild;\n\n      if (textarea.value !== '') {\n        addBtn.removeAttribute('disabled');\n      } else {\n        addBtn.setAttribute('disabled', 'true');\n      }\n    }\n  });\n}\n// CONCATENATED MODULE: ./src/modules/todo/patchTodo.js\nfunction patchTodo_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction patchTodo_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { patchTodo_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { patchTodo_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\n\nfunction patchTodo(_x, _x2, _x3) {\n  return _patchTodo.apply(this, arguments);\n}\n\nfunction _patchTodo() {\n  _patchTodo = patchTodo_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(body, id, targetElement) {\n    var userId, result, title, content, author, previousContent, log;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            userId = localStorage.getItem('userId');\n            body['userId'] = userId;\n            _context.prev = 2;\n            _context.next = 5;\n            return patchFetchManger(\"\".concat(todoApi, \"/\").concat(id), body);\n\n          case 5:\n            result = _context.sent;\n\n            if (!(result.status !== 200)) {\n              _context.next = 12;\n              break;\n            }\n\n            if (!(result.status === 401)) {\n              _context.next = 11;\n              break;\n            }\n\n            throw new Error('쓰기 모드가 아닙니다');\n\n          case 11:\n            throw new Error('다시 해주세요');\n\n          case 12:\n            title = body.title, content = body.content, author = body.author;\n            previousContent = targetElement.querySelector('.todo-item-title').textContent;\n            updateContentText(targetElement, title, content);\n            log = makeUpdateLog(previousContent, title);\n            addTodoLog(log);\n            return _context.abrupt(\"return\", true);\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](2);\n            alert(_context.t0);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 20]]);\n  }));\n  return _patchTodo.apply(this, arguments);\n}\n\nfunction updateContentText(targetElement, title, content) {\n  targetElement.querySelector('.todo-item-title').textContent = title;\n  targetElement.querySelector('.todo-item-content > p').textContent = content;\n}\n\nfunction makeUpdateLog(previousContent, presentContent) {\n  return {\n    username: localStorage.getItem('username'),\n    actionType: actionTypeList.UPDATE,\n    time: new Date().toString(),\n    previousContent: previousContent,\n    presentContent: presentContent,\n    previousColumn: null,\n    presentColumn: null\n  };\n}\n// CONCATENATED MODULE: ./src/modules/todoList/patchTodoList.js\nfunction patchTodoList_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction patchTodoList_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { patchTodoList_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { patchTodoList_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\nfunction patchTodoList(_x, _x2, _x3) {\n  return _patchTodoList.apply(this, arguments);\n}\n\nfunction _patchTodoList() {\n  _patchTodoList = patchTodoList_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(body, groupId, userId) {\n    var result;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            body['userId'] = userId;\n            _context.prev = 1;\n            _context.next = 4;\n            return patchFetchManger(\"\".concat(todoListApi, \"/\").concat(groupId), body);\n\n          case 4:\n            result = _context.sent;\n\n            if (!(result.status !== 200)) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error();\n\n          case 7:\n            return _context.abrupt(\"return\", true);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            alert('다시 해주세요');\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 10]]);\n  }));\n  return _patchTodoList.apply(this, arguments);\n}\n// CONCATENATED MODULE: ./src/modules/modal.js\nfunction modal_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction modal_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { modal_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { modal_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\nfunction toggleModal() {\n  var modal = document.querySelector('.modal');\n  var contentModal = modal.children[0];\n  var columnModal = modal.children[1];\n  var targetElement;\n  var liId;\n  var id;\n  modal.addEventListener('click', closeHandler);\n  modal.addEventListener('click', contentUpdateHandler);\n  modal.addEventListener('click', columnUpdateHandler);\n  document.addEventListener('dblclick', showContentModalHandler);\n  document.addEventListener('dblclick', showColumnModalHandler);\n\n  function closeHandler(e) {\n    if (e.target.dataset.id !== 'modal-close') return;\n    closeModal(e);\n  }\n\n  function contentUpdateHandler(_x) {\n    return _contentUpdateHandler.apply(this, arguments);\n  }\n\n  function _contentUpdateHandler() {\n    _contentUpdateHandler = modal_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {\n      var textArea, _splitText, title, content, result;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(e.target.dataset.id !== 'modal-content-update')) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              textArea = e.target.previousElementSibling;\n              _splitText = splitText(textArea.value), title = _splitText.title, content = _splitText.content;\n              _context.next = 6;\n              return patchTodo({\n                title: title,\n                content: content,\n                author: 'cc6656'\n              }, liId, targetElement);\n\n            case 6:\n              result = _context.sent;\n\n              if (result) {\n                _context.next = 9;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 9:\n              textArea.value = '';\n              closeModal(e);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _contentUpdateHandler.apply(this, arguments);\n  }\n\n  function columnUpdateHandler(_x2) {\n    return _columnUpdateHandler.apply(this, arguments);\n  }\n\n  function _columnUpdateHandler() {\n    _columnUpdateHandler = modal_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(e) {\n      var textArea, groupTitle, groupId, userId, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(e.target.dataset.id !== 'modal-column-update')) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              textArea = e.target.previousElementSibling;\n              groupTitle = textArea.value;\n              groupId = \"todoList-\".concat(id);\n              userId = localStorage.getItem('userId');\n              _context2.next = 8;\n              return patchTodoList({\n                groupTitle: groupTitle\n              }, groupId, userId);\n\n            case 8:\n              result = _context2.sent;\n\n              if (result) {\n                _context2.next = 11;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 11:\n              targetElement.textContent = groupTitle;\n              textArea.value = '';\n              closeModal(e);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _columnUpdateHandler.apply(this, arguments);\n  }\n\n  function showContentModalHandler(e) {\n    var li = e.target.closest('li');\n    if (!li || li.className !== 'todo-item') return;\n    if (localStorage.getItem('authorization') !== 'true') return alert('쓰기모드가 아닙니다');\n    liId = li.getAttribute('id');\n    targetElement = li;\n    renderContentModal(li);\n  }\n\n  function renderContentModal(li) {\n    var textArea = contentModal.querySelector('textarea');\n    var content = li.querySelector('.todo-item-title').textContent + li.querySelector('.todo-item-content').textContent;\n    renderModal(contentModal, textArea, content);\n  }\n\n  function showColumnModalHandler(e) {\n    if (e.target.className !== 'todo-container-header-title') return;\n    if (localStorage.getItem('authorization') !== 'true') return alert('쓰기모드가 아닙니다');\n    id = e.target.id.substr(13);\n    targetElement = e.target;\n    renderColumnModal(e);\n  }\n\n  function renderColumnModal(e) {\n    var inputText = columnModal.querySelector('input[type=\"text\"]');\n    renderModal(columnModal, inputText, e.target.textContent);\n  }\n\n  function renderModal(modal, element, content) {\n    modal.classList.remove('hidden');\n    element.value = content;\n    element.select();\n  }\n\n  function closeModal(e) {\n    e.target.closest('.modal-container').classList.add('hidden');\n  }\n}\n// CONCATENATED MODULE: ./src/modules/sidebar.js\nfunction sidebar() {\n  var sidebar = document.querySelector('.sidebar');\n  openSidebar();\n  closeSidebar();\n\n  function openSidebar() {\n    var menuBtn = document.querySelector('.menu-btn');\n    menuBtn.addEventListener('click', function () {\n      sidebar.classList.remove('hidden');\n    });\n  }\n\n  function closeSidebar() {\n    var closeBtn = sidebar.querySelector('#sidebar-close');\n    closeBtn.addEventListener('click', function () {\n      sidebar.classList.add('hidden');\n    });\n  }\n}\n// CONCATENATED MODULE: ./src/modules/column/addColumn.js\n\n\nfunction addColumn() {\n  document.getElementById('add-column').addEventListener('click', function () {\n    if (localStorage.getItem('authorization') !== 'true') return alert('쓰기모드가 아닙니다');\n    var newColumn = new Container();\n    var columnLists = document.querySelectorAll('.todo-container');\n    var newId = 1;\n\n    if (columnLists.length !== 0) {\n      newId = +columnLists[columnLists.length - 1].id.substr(8) + 1;\n    }\n\n    var data = {\n      groupId: \"todoList-\".concat(newId),\n      groupTitle: '새로운 컬럼',\n      userId: localStorage.getItem('userId')\n    };\n    postFetchManger('/api/todolist', data).then(function (res) {\n      if (res.status !== 200) {\n        if (res.status === 401) throw new Error('쓰기 모드가 아닙니다');else throw new Error('다시 해주세요');\n      }\n\n      return res;\n    }).then(function (res) {})[\"catch\"](function (e) {\n      alert(e);\n    });\n    newColumn.addContainer(data);\n  });\n}\n// CONCATENATED MODULE: ./src/modules/column/deleteColumn.js\nfunction deleteColumn_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction deleteColumn_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { deleteColumn_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { deleteColumn_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\nfunction deleteColumn() {\n  document.addEventListener('click', /*#__PURE__*/function () {\n    var _ref = deleteColumn_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {\n      var id, groupId, userId, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (e.target.classList.contains('fa-times')) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              if (!(localStorage.getItem('authorization') !== 'true')) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\", alert('쓰기모드가 아닙니다'));\n\n            case 4:\n              id = e.target.closest('section').id.substr(8);\n              groupId = \"todoList-\".concat(id);\n              userId = localStorage.getItem('userId');\n              _context.prev = 7;\n              _context.next = 10;\n              return deleteFetchManager(\"\".concat(todoListApi, \"/\").concat(groupId), {\n                userId: userId\n              });\n\n            case 10:\n              result = _context.sent;\n\n              if (!(result.status !== 200)) {\n                _context.next = 17;\n                break;\n              }\n\n              if (!(result.status === 401)) {\n                _context.next = 16;\n                break;\n              }\n\n              throw new Error('쓰기 모드가 아닙니다');\n\n            case 16:\n              throw new Error('다시 해주세요');\n\n            case 17:\n              e.target.closest('section').remove();\n              _context.next = 23;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](7);\n              return _context.abrupt(\"return\", alert(_context.t0));\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 20]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}\n// CONCATENATED MODULE: ./src/modules/login.js\n\n\nfunction login() {\n  var Header = document.querySelector('header');\n  var beforelogin = document.getElementById('beforelogin');\n  var afterlogin = document.getElementById('afterlogin');\n  Header.querySelector(\"input[type='button']\").addEventListener('click', loginHandler);\n  Header.querySelector('#logout-btn').addEventListener('click', logoutHandler);\n\n  function logoutHandler(e) {\n    e.preventDefault();\n    localStorage.setItem('authorization', '');\n    localStorage.setItem('username', '');\n    localStorage.setItem('userId', '');\n    beforelogin.style = '';\n    afterlogin.classList.add('hidden');\n    Header.querySelector('p').classList.add('hidden');\n    Header.querySelector('form').style.display = 'flex';\n  }\n\n  function loginHandler(e) {\n    e.preventDefault();\n    var username = Header.querySelector('#username').value;\n    var authorziation = Header.querySelector('#authorization').checked;\n    Header.querySelector('p').classList.remove('hidden');\n    Header.querySelector('form').style.display = 'none';\n    beforelogin.style.display = 'none';\n    afterlogin.classList.remove('hidden');\n    postLogin(username, authorziation);\n  }\n\n  function postLogin(username, authorziation) {\n    postFetchManger(userApi, {\n      username: username,\n      authorziation: authorziation\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      localStorage.setItem('authorization', data.authorization);\n      localStorage.setItem('username', data.username);\n      localStorage.setItem('userId', data.id);\n    })[\"catch\"](function (e) {\n      return res.status(statusCode.INTERNAL_SERVER_ERROR).send(errorMessage.SERVER_ERROR);\n    });\n  }\n}\n// CONCATENATED MODULE: ./src/app.js\nfunction app_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = app_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction app_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return app_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return app_arrayLikeToArray(o, minLen); }\n\nfunction app_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction app_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction app_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { app_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { app_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar css = __webpack_require__(4);\n\nvar variable = __webpack_require__(6);\n\n\n\n\n\n\n\n\n\n\n\n\nwindow.addEventListener('DOMContentLoaded', /*#__PURE__*/app_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n  var beforelogin, afterlogin, storedUsername, Header, main, draggables, _iterator, _step, draggable;\n\n  return regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          document.addEventListener('contextmenu', function (e) {\n            return e.preventDefault();\n          });\n          beforelogin = document.getElementById('beforelogin');\n          afterlogin = document.getElementById('afterlogin');\n          storedUsername = localStorage.getItem('username');\n          Header = document.querySelector('header');\n\n          if (storedUsername === '' || storedUsername === null) {\n            //로그인 안함\n            beforelogin.style.display = 'flex';\n            afterlogin.classList.add('hidden');\n            Header.querySelector('p').classList.add('hidden');\n            Header.querySelector('form').style.display = 'flex';\n          } else {\n            //  로그인 함\n            beforelogin.style.display = 'none';\n            afterlogin.classList.remove('hidden');\n            Header.querySelector('p').classList.remove('hidden');\n            Header.querySelector('form').style.display = 'none';\n          }\n\n          main = new main_Main(document.querySelector('main'));\n          _context.next = 9;\n          return main.init();\n\n        case 9:\n          draggables = document.querySelectorAll('.todo-item');\n          _iterator = app_createForOfIteratorHelper(draggables);\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              draggable = _step.value;\n              new dragAndDrop_Draggable(draggable);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          login();\n          toggleInput();\n          toggleBtn();\n          toggleModal();\n          sidebar();\n          addColumn();\n          deleteColumn();\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n")}]);